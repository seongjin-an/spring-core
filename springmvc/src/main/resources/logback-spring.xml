<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--
      https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.logging
      -->
    <!--
      Profile-specific Configuration
      The <springProfile> tag lets you optionally include or exclude sections of configuration based on the active Spring profiles.
      Profile sections are supported anywhere within the <configuration> element.
      Use the name attribute to specify which profile accepts the configuration.
      The <springProfile> tag can contain a profile name (for example staging) or a profile expression.
      A profile expression allows for more complicated profile logic to be expressed, for example production & (eu-central | eu-west).
      Check the reference guide for more details. The following listing shows three sample profiles:
    -->
    <springProfile name="staging">
        <!-- configuration to be enabled when the "staging" profile is active -->
    </springProfile>

    <springProfile name="dev | staging">
        <!-- configuration to be enabled when the "dev" or "staging" profiles are active -->
    </springProfile>

    <springProfile name="!production">
        <!-- configuration to be enabled when the "production" profile is not active -->
    </springProfile>\

    <!--
        Environment Properties
        The <springProperty> tag lets you expose properties from the Spring Environment for use within Logback.
        Doing so can be useful if you want to access values from your application.properties file in your Logback configuration.
        The tag works in a similar way to Logback’s standard <property> tag.
        However, rather than specifying a direct value, you specify the source of the property (from the Environment).
        If you need to store the property somewhere other than in local scope, you can use the scope attribute.
        If you need a fallback value (in case the property is not set in the Environment), you can use the defaultValue attribute.
        The following example shows how to expose properties for use within Logback:
    -->
<!--    <springProperty scope="context" name="fluentHost" source="myapp.fluentd.host" defaultValue="localhost"/>-->
<!--    <appender name="FLUENT" class="ch.qos.logback.more.appenders.DataFluentAppender">-->
<!--        <remoteHost>${fluentHost}</remoteHost>-->
<!--    </appender>-->


    <!-- aplication.yml에 정의한 log level, dir 데이터를 정의합니다 -->
    <springProperty scope="context" name="LOG_LEVEL" source="bamdule.logging.level" defaultValue="info"/>
    <springProperty scope="context" name="LOG_DIR" source="bamdule.logging.dir" defaultValue="${HOME}"/>

    <!--콘솔에 로그를 남깁니다.-->
    <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>
                %d{yyyy-MM-dd HH:mm:ss} [%thread] [%-5level] %logger{36} - %msg%n
            </Pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--파일에 로그를 남깁니다.-->
    <appender name="File" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_DIR}/bamdule.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>
                %d{yyyy-MM-dd HH:mm:ss} [%-5level] %logger{36} - %msg%n
            </Pattern>
            <charset>UTF-8</charset>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_DIR}/bamdule/bamdule.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!--파일에 로그를 남깁니다. (Roling)-->
    <appender name="RollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_DIR}/archived/bamdule_roling.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>%d{yyyy-MM-dd HH:mm:ss} [%-5level] %logger{36} - %msg%n</Pattern>
            <charset>UTF-8</charset>
        </encoder>

        <!-- 10MB가 넘어가면 새로운 압축파일이 생성 -->
        <triggeringPolicy
                class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>

        <!-- 파일을 덮어쓰는 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <FileNamePattern>${LOG_DIR}/archived/bamdule_roling.%i.log.zip</FileNamePattern>
            <!--
                10MB단위로 로그 압축 파일이 생성된다. (1 ~ 10)
                10개가 넘어가면 오래된순으로 덮어쓰기 됩니다.
            -->
            <MinIndex>1</MinIndex>
            <MaxIndex>10</MaxIndex>
        </rollingPolicy>
    </appender>

    <!--에러 일 경우 파일에 로그를 남깁니다-->
    <appender name="Error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${LOG_DIR}/bamdule-error.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>
                %d{yyyy-MM-dd HH:mm:ss} [%-5level] %logger{36} - %msg%n
            </Pattern>
            <charset>UTF-8</charset>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_DIR}/bamdule/bamdule-error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>


    <!--
        org.springframework.web 패키지 아래에서 발생하는 INFO 레벨 로그를 Console, File에 남깁니다.
        root의 속성을 상속받지 않습니다.
    -->
    <logger name="org.springframework.web" level="INFO" additivity="false">
        <appender-ref ref="Console"/>
        <appender-ref ref="File"/>
        <appender-ref ref="Error"/>
    </logger>

<!--    <logger name="org.apache.ibatis" level="DEBUG" additivity="false">-->
<!--        <appender-ref ref="Console"/>-->
<!--        <appender-ref ref="RollingFile"/>-->
<!--        <appender-ref ref="Error"/>-->
<!--    </logger>-->

    <!--
        DEBUG 레벨 로그를 Console, File, RollingFile에 남깁니다.
        ERROR 인 경우 bamdule-error.log에 남깁니다.
    -->
    <root level="${LOG_LEVEL}">
        <appender-ref ref="Console"/>
        <appender-ref ref="File"/>
        <appender-ref ref="Error"/>
    </root>
</configuration>